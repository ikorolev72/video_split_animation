<?php
/**
 *
 *
 * This class is the wrapper for ffmpeg ( http://ffmpeg.org ) ass subtitles
 * @author korolev-ia [at] yandex.ru
 * @version 1.1.0
 */

class FfmpegSubtitlesLib
{

    private $error; # last error
    public $subtitles = array();
    private $assHeader; # last error
    private $width;
    private $height;
    private $styles;

    public function __construct()
    {
        $this->styles = array('MyStyle1', 'MyStyle2', 'MyStyle3', 'MyStyle4');
        $this->error = null;
        $this->width = 854;
        $this->height = 480;
        $myStyle = "Style: TopTitles,Consolas,30,&H0000FFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,5,5,8,50,50,550,1";
        $width = $this->width;
        $height = $this->height;

        $this->assHeader = "[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
ScriptType: v4.00+
PlayResX: $width
PlayResY: $height
WrapStyle: 0
YCbCr Matrix: TV.601

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: video-orignal.mp4
Video File: video-orignal.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Active Line: 63
Video Position: 1739

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,40,&H00525252,&H0000FFFF,&H00FCFCFD,&H00000000,0,-1,0,0,100,100,0,0,1,2,0,8,0,0,300,1
Style: MiddleTitles,Consolas,30,&H0000FFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,5,5,8,30,50,600,1
Style: BottomTitles,Consolas,30,&H0000FFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,5,5,8,30,50,650,1
Style: MyStyle1,Verdana,24,&H00FFFFFF,&H0000FFFF,&H00444444,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,0,0,300,1
Style: MyStyle2,Verdana,26,&H00FFFFFF,&H0000FFFF,&H00444444,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,0,0,300,1
Style: MyStyle3,Verdana,28,&H00FFFFFF,&H0000FFFF,&H00444444,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,0,0,300,1
Style: MyStyle4,Verdana,30,&H00FFFFFF,&H0000FFFF,&H00444444,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,0,0,300,1
Style: MyStyle5,Verdana,26,&H00FFFFFF,&H007C7C81,&H007C7C81,&H00000000,-1,0,0,0,100,100,0,0,1,3,3,7,0,0,300,1


[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
";

    }

/**
 * setLastError
 * set last error description
 *
 * @param    string  $err
 * @return    string
 */
    private function setLastError($err)
    {
        $this->error = $err;
        return (true);
    }

/**
 * getLastError
 * return last error description
 *
 * @return    string
 */
    public function getLastError()
    {
        return ($this->error);
    }

/**
 * writeSubtitles
 * this function write subtitles in ass format
 *
 * @param    string $fileName
 * @return    boolean
 */

    public function writeSubtitles($fileName)
    {
        $this->setLastError('');
        $ass = $this->assHeader;
        foreach ($this->subtitles as $k => $val) {
            $since = $this->float2time($val['start']);
            $to = $this->float2time($val['end']);
            $styleName = $val['style'];
            $text = $val['text'];
            $ass .= "Dialogue: 0,$since,$to,$styleName,,0,0,0,,$text\n";
        }
        if (!file_put_contents($fileName, $ass)) {
					print "ERRRORRRRR!!!! :$!";
            $this->setLastError("Cannot write content to file '$fileName'");
            return (false);
        }
        return (true);
    }

/**
 * writeSubtitles
 * this function print subtitles in ass format to stdout
 *
 * @return    boolean
 */
    public function printSubtitles()
    {
        $this->setLastError('');
        $ass = $this->assHeader;
        foreach ($this->subtitles as $k => $val) {
            $since = $this->float2time($val['start']);
            $to = $this->float2time($val['end']);
            $styleName = $val['style'];
            $text = $val['text'];
            $ass .= "Dialogue: 0,$since,$to,$styleName,,0,0,0,,$text\n";
        }
        print $ass;
        return (true);
    }

/**
 * readSubtitles
 * this function read subtitles file into private class array $this->$subtitles with structure like
 * 'text'=>'subtitles text', 'start'=>'00:00:00.00', 'end'=>'00:00:01.00'
 *
 * @param    string $fileName
 * @param    string $type    Values 'vtt' or 'json'
 * @return    array
 */

    public function readSubtitles($fileName, $type = "vtt")
    {
        $this->setLastError('');
        if ($type === 'json') {
            $string = file_get_contents($fileName);
            $params = json_decode($string, true);
            if (!$params) {
                $this->setLastError("Cannot decode json from $fileName");
                return (false);
            }
            $i = 0;
            foreach ($params as $line) {
                $this->subtitles[$i] = array();
                $this->subtitles[$i]['style'] = 'Default';
                $this->subtitles[$i]['first_line'] = $line['text'];
                $this->subtitles[$i]['start'] = $this->time2float($line['start']);
                $this->subtitles[$i]['end'] = $this->time2float($line['end']);
                $this->subtitles[$i]['end_part'] = '';
            }
            return (true);
        }

        $file = fopen($fileName, "rt");
        if (!$file) {
            $this->setLastError("Cannot open file $fileName");
            return (false);
        }
        $i = 1;
        $second_line = 0;

        $line_of_text = rtrim(fgets($file));
        if ($line_of_text == 'WEBVTT') {
            $type = 'vtt';
        } else {
            $this->setLastError('Unknown or unsupported format of subtitles');
            return (false);
        }

        while (!feof($file)) {
            $line_of_text = rtrim(fgets($file));
            if ('vtt' == $type) {
                $matches = array();
                if (preg_match("/^(\d:\d\d:\d\d\.\d\d\d|\d\d:\d\d:\d\d\.\d\d\d|\d\d:\d\d\.\d\d\d)\s+--\>\s+(\d:\d\d:\d\d\.\d\d\d|\d\d:\d\d:\d\d\.\d\d\d|\d\d:\d\d\.\d\d\d)(.*)/", $line_of_text, $matches)) {

                    $this->subtitles[$i] = array();
                    $this->subtitles[$i]['style'] = 'Default';
                    $this->subtitles[$i]['first_line'] = $line_of_text;
                    $this->subtitles[$i]['start'] = $this->time2float($matches[1]);
                    $this->subtitles[$i]['end'] = $this->time2float($matches[2]);
                    $this->subtitles[$i]['end_part'] = $matches[3];
                    $second_line = 1;
                    continue;
                }
                if ($second_line) {
                    $this->subtitles[$i]['second_line'] = $line_of_text;
                    $this->subtitles[$i]['text'] = preg_replace('/\<.+?\>/', "", $line_of_text);
                    $second_line = 0;
                    $i++;
                }
            }
            #$members = $line_of_text ; # explode( PHP_EOL, $line_of_text );
        }
        fclose($file);
        #print var_dump( $this->subtitles );
        return (true);
    }

/**
 * kineticTypography
 * this function take subtitles from line  $lineNumber and apply effect to next $lineCount

 *
 * @param    integer $lineNumber
 * @param    integer $lineCount
 * @param    string $effectName
 *                 effect1 - line by line from top to bottom with fade
 *                 effect2 - line by line with zooming in the center
 *                 effect3 - concat several lines and do colorise word by word ( like karaoke )
 *                 effect4 - print line in the center and angle to down with fade-out
 *                 effect5 - print line shearing (perspective distortion)
 *                 effect6 - concat several lines and fade in / fade out
 *                 effect7 - words by words in vertical
 *                 effect8 - same ase effect2 but accurate end time
 * @return    array
 */
    public function kineticTypography($lineNumber, $lineCount, $effectName)
    {
        $mySub = array();
        if ('effect1' == $effectName) {
            $k = 0;
            for ($i = 0; $i < $lineCount; $i++) {
                if (!array_key_exists($lineNumber + $i, $this->subtitles)) {
                    continue;
                }

                $mySub[$k] = array();
                $mySub[$k] = $this->subtitles[$lineNumber + $i];
                $mySub[$k]['style'] = $this->styles[array_rand($this->styles)];
                #$mySub[$k]['style']='MyStyle2' ; # fix style
                $mySub[$k]['start'] = $this->subtitles[$lineNumber + $i]['start'];
                $mySub[$k]['end'] = $this->subtitles[$lineNumber + $i]['end'] + 2;
                $mySub[$k]['first_line'] = $this->subtitles[$lineNumber + $i]['first_line'];

                $x = rand(20, 55);
                $y = intval(($i + 1) * ($this->height / ($lineCount + 3)));
                $mySub[$k]['text'] = "{\\q1\\pos( $x, $y )\\fad(500, 2000)} " . $this->subtitles[$lineNumber + $i]['text'];
                $mySub[$k]['second_line'] = $mySub[$k]['text'];

                $k++;
            }
            return ($mySub);
        }
        if ('effect2' == $effectName) {
            $k = 0;
            for ($i = 0; $i < $lineCount; $i++) {
                if (!array_key_exists($lineNumber + $i, $this->subtitles)) {
                    continue;
                }

                $mySub[$k] = array();
                $mySub[$k] = $this->subtitles[$lineNumber + $i];
                $mySub[$k]['style'] = $this->styles[array_rand($this->styles)];
                #$mySub[$k]['style']='MyStyle2' ; # fix style
                $mySub[$k]['start'] = $this->subtitles[$lineNumber + $i]['start'];
                $mySub[$k]['end'] = $this->subtitles[$lineNumber + $i]['end'] + 1;
                $mySub[$k]['first_line'] = $this->subtitles[$lineNumber + $i]['first_line'];

                $mySub[$k]['text'] = "{\\q1\\an5\\fscx0\\fscy0\\t(0,1000,\\fscx100\\fscy100)\\fad(0, 1000)} " . $this->subtitles[$lineNumber + $i]['text'];
                $mySub[$k]['second_line'] = $mySub[$k]['text'];

                $k++;
            }
            return ($mySub);
        }
        if ('effect3' == $effectName) {
            $k = 0;
            $str = '';
            $mySub[0] = array();
            for ($i = 0; $i < $lineCount; $i++) {
                if (!array_key_exists($lineNumber + $i, $this->subtitles)) {
                    continue;
                }

                if (0 === $k) {
                    $mySub[0]['start'] = $this->subtitles[$lineNumber + $i]['start'];
                }
                $mySub[0]['end'] = $this->subtitles[$lineNumber + $i]['end'];
                $wordsCount = count(preg_split("/\s+/", $this->subtitles[$lineNumber + $i]['text']));
                if (0 == $wordsCount) {
                    $wordsCount = 1;
                }

                $delta = 100 * ($this->subtitles[$lineNumber + $i]['end'] - $this->subtitles[$lineNumber + $i]['start']) / $wordsCount;
                $str .= join(" {\\k$delta}", preg_split("/\s+/", $this->subtitles[$lineNumber + $i]['text'])) . "\N";
                $k++;
            }
            #$x=rand ( 20, 40 );
            #$y=intval( $this->height/2 );
            $mySub[0]['style'] = 'MyStyle5';
            $mySub[0]['end'] += 1;
            $tEnd = $mySub[0]['end'] * 1000;
            $mySub[0]['text'] = "{\\q1\\pos(320,180)\\an5\\fad(0, 1000)\\t(500,$tEnd,\\frz15)} $str";
            return ($mySub);
        }
        if ('effect4' == $effectName) {
            $k = 0;
            for ($i = 0; $i < $lineCount; $i++) {
                if (!array_key_exists($lineNumber + $i, $this->subtitles)) {
                    continue;
                }

                $mySub[$k] = array();
                $mySub[$k] = $this->subtitles[$lineNumber + $i];
                $mySub[$k]['style'] = $this->styles[array_rand($this->styles)];
                #$mySub[$k]['style']='MyStyle2' ; # fix style
                $mySub[$k]['start'] = $this->subtitles[$lineNumber + $i]['start'];
                $mySub[$k]['end'] = $this->subtitles[$lineNumber + $i]['end'] + 1;
                $mySub[$k]['first_line'] = $this->subtitles[$lineNumber + $i]['first_line'];
                $tEnd = $mySub[$k]['end'] * 1000;
                $mySub[$k]['text'] = "{\\q1\\pos(320,180)\\an5\\fad(0, 1000)\\org(0,0)\\t(0,$tEnd,\\frz-45)} " . $this->subtitles[$lineNumber + $i]['text'];
                $mySub[$k]['second_line'] = $mySub[$k]['text'];

                $k++;
            }
            return ($mySub);
        }
        if ('effect5' == $effectName) {
            $k = 0;
            for ($i = 0; $i < $lineCount; $i++) {
                if (!array_key_exists($lineNumber + $i, $this->subtitles)) {
                    continue;
                }

                $mySub[$k] = array();
                $mySub[$k] = $this->subtitles[$lineNumber + $i];
                $mySub[$k]['style'] = $this->styles[array_rand($this->styles)];
                #$mySub[$k]['style']='MyStyle2' ; # fix style
                $mySub[$k]['start'] = $this->subtitles[$lineNumber + $i]['start'];
                $mySub[$k]['end'] = $this->subtitles[$lineNumber + $i]['end'] + 1;
                $mySub[$k]['first_line'] = $this->subtitles[$lineNumber + $i]['first_line'];
                $tEnd = $mySub[$k]['end'] * 1000;
                $x = rand(20, 55);
                $y = intval(($i + 1) * ($this->height / ($lineCount + 3)));

                $mySub[$k]['text'] = "{\\q1\\pos( $x, $y )\\fad(0, 1000)\\t(1000,$tEnd,\\fax-45)} " . $this->subtitles[$lineNumber + $i]['text'];
                $mySub[$k]['second_line'] = $mySub[$k]['text'];

                $k++;
            }
            return ($mySub);
        }
        if ('effect6' == $effectName) {
            $k = 0;
            $str = '';
            $mySub[0] = array();
            for ($i = 0; $i < $lineCount; $i++) {
                if (!array_key_exists($lineNumber + $i, $this->subtitles)) {
                    continue;
                }

                if (0 === $k) {
                    $mySub[0]['start'] = $this->subtitles[$lineNumber + $i]['start'];
                }
                $mySub[0]['end'] = $this->subtitles[$lineNumber + $i]['end'];
                #$wordsCount=count( preg_split ( "/\s+/", $this->subtitles[ $lineNumber+$i ]['text'] ) );
                #if( 0==$wordsCount ) $wordsCount=1;
                #$delta=100*( $this->subtitles[ $lineNumber+$i ]['end'] - $this->subtitles[ $lineNumber+$i ]['start']) / $wordsCount  ;
                $str .= $this->subtitles[$lineNumber + $i]['text'] . "\N";
                $k++;
            }
            #$x=rand ( 20, 40 );
            #$y=intval( $this->height/2 );
            $mySub[0]['style'] = 'MyStyle4';
            $mySub[0]['end'] += 2;
            $tEnd = ($mySub[0]['end'] - $mySub[0]['start']) * 1000;
            $pEnd = $tEnd / 2 - 1000;
            $x = $this->width / 2;
            $y = $this->height / 2;
            $width = $this->width;
            $height = $this->height;
            $mySub[0]['text'] = "{\\q1\\an5\\fscx20\\fscy20\\t(0,$tEnd,\\fscx100\\fscy100)\\fad($pEnd,2000)} $str";
            return ($mySub);
        }
        if ('effect7' == $effectName) {
            $k = 0;
            for ($i = 0; $i < $lineCount; $i++) {
                if (!array_key_exists($lineNumber + $i, $this->subtitles)) {
                    continue;
                }

                $wordsCount = count(preg_split("/\s+/", $this->subtitles[$lineNumber + $i]['text']));
                if (0 == $wordsCount) {
                    $wordsCount = 1;
                }

                $delta = ($this->subtitles[$lineNumber + $i]['end'] - $this->subtitles[$lineNumber + $i]['start']) / $wordsCount;
                $words = preg_split("/\s+/", $this->subtitles[$lineNumber + $i]['text']);
                $timeStart = $this->subtitles[$lineNumber + $i]['start'];
                $j = 0;
                foreach ($words as $w) {
                    $mySub[$k] = array();
                    $mySub[$k]['start'] = $timeStart;
                    $mySub[$k]['end'] = $timeStart + $delta + 2;
                    $timeStart = $timeStart + $delta;
                    $mySub[$k]['style'] = $this->styles[array_rand($this->styles)];
                    $width = $this->width;
                    $height = $this->height;
                    $x = 100 + ($i + 1) * 100;
                    $y = 50 + 34 * ($j + 1);
                    $mySub[$k]['text'] = "{\\q1\\an1\\pos( $x, $y )\\fad(500,1500)} $w ";
                    $k++;
                    $j++;
                }
            }
            return ($mySub);
				}
        if ('effect8' == $effectName) {
					$k = 0;
					for ($i = 0; $i < $lineCount; $i++) {
							if (!array_key_exists($lineNumber + $i, $this->subtitles)) {
									continue;
							}

							$mySub[$k] = array();
							$mySub[$k] = $this->subtitles[$lineNumber + $i];
							$mySub[$k]['style'] = $this->styles[array_rand($this->styles)];
							#$mySub[$k]['style']='MyStyle2' ; # fix style
							$mySub[$k]['start'] = $this->subtitles[$lineNumber + $i]['start'];
							$mySub[$k]['end'] = $this->subtitles[$lineNumber + $i]['end'] ;
							$mySub[$k]['first_line'] = $this->subtitles[$lineNumber + $i]['first_line'];

							$mySub[$k]['text'] = "{\\q1\\an5\\fscx0\\fscy0\\t(0,1000,\\fscx100\\fscy100)\\fad(0, 1000)} " . $this->subtitles[$lineNumber + $i]['text'];
							$mySub[$k]['second_line'] = $mySub[$k]['text'];

							$k++;
					}
					return ($mySub);
			}				

        return (false);
    }

    private function fixTimeLine()
    {
        return (true);
    }

/**
 * time2float
 * this function translate time in format 00:00:00.00 to seconds
 *
 * @param    string $t
 * @return    float
 */

    public function time2float($t)
    {
        $matches = preg_split("/:/", $t, 3);
        if (array_key_exists(2, $matches)) {
            list($h, $m, $s) = $matches;
            return ($s + 60 * $m + 3600 * $h);
        }
        $h = 0;
        list($m, $s) = $matches;
        return ($s + 60 * $m);
    }

/**
 * float2time
 * this function translate time from seconds to format 00:00:00.00
 *
 * @param    float $i
 * @return    string
 */
    public function float2time($i)
    {
        $h = intval($i / 3600);
        $m = intval(($i - 3600 * $h) / 60);
        $s = $i - 60 * floatval($m) - 3600 * floatval($h);
        return sprintf("%01d:%02d:%05.2f", $h, $m, $s);
    }

/*
private function  getFontAlias {
my $fontfile=shift;
if( ! -f $fontfile ) {
w2log( "Font file '$fontfile' do not exists. Will be used Arial font" );
return 'Arial';
}
my $cmd="/usr/bin/fc-list | grep ^$fontfile | head -1";

my $fcList=`$cmd`;
my ( undef, $fontAlias, undef ) =split( /:/, $fcList );
if( ! $fontAlias ) {
w2log( "Font file '$fontfile' do not exists in fc-list. Will be used Arial font" );
return 'Arial';
}
return $fontAlias;
}

 */

}
